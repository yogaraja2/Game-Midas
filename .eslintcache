[{"D:\\Midas\\Game-Midas\\src\\index.jsx":"1","D:\\Midas\\Game-Midas\\src\\reportWebVitals.js":"2","D:\\Midas\\Game-Midas\\src\\App.jsx":"3","D:\\Midas\\Game-Midas\\src\\routes.js":"4","D:\\Midas\\Game-Midas\\src\\utils\\Router\\RouteMapper.jsx":"5","D:\\Midas\\Game-Midas\\src\\config\\routes.js":"6","D:\\Midas\\Game-Midas\\src\\utils\\Router\\RedirectRoute.jsx":"7","D:\\Midas\\Game-Midas\\src\\pages\\Home\\index.jsx":"8","D:\\Midas\\Game-Midas\\src\\pages\\Account\\index.jsx":"9","D:\\Midas\\Game-Midas\\src\\pages\\Home\\routes.js":"10","D:\\Midas\\Game-Midas\\src\\pages\\Home\\GameControl\\index.jsx":"11","D:\\Midas\\Game-Midas\\src\\pages\\Account\\Login\\index.jsx":"12","D:\\Midas\\Game-Midas\\src\\pages\\Account\\Signup\\index.jsx":"13","D:\\Midas\\Game-Midas\\src\\components\\Footer\\index.jsx":"14","D:\\Midas\\Game-Midas\\src\\utils\\commonFunctions.js":"15","D:\\Midas\\Game-Midas\\src\\components\\LinkButton\\index.jsx":"16","D:\\Midas\\Game-Midas\\src\\components\\FormField\\index.jsx":"17","D:\\Midas\\Game-Midas\\src\\components\\DatePicker\\index.jsx":"18","D:\\Midas\\Game-Midas\\src\\components\\TextArea\\index.jsx":"19","D:\\Midas\\Game-Midas\\src\\components\\Select\\index.jsx":"20","D:\\Midas\\Game-Midas\\src\\components\\Textfield\\index.jsx":"21","D:\\Midas\\Game-Midas\\src\\pages\\Home\\SelectAvatar\\index.jsx":"22","D:\\Midas\\Game-Midas\\src\\pages\\Home\\LeaderBoard\\index.jsx":"23","D:\\Midas\\Game-Midas\\src\\pages\\Home\\SelectDream\\index.jsx":"24","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\index.jsx":"25","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\routes.js":"26","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Advisor\\index.jsx":"27","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Balance\\index.jsx":"28","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\CashFlow\\index.jsx":"29","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Stats\\index.jsx":"30","D:\\Midas\\Game-Midas\\src\\pages\\Account\\SelectRole\\index.jsx":"31","D:\\Midas\\Game-Midas\\src\\Api.js":"32","D:\\Midas\\Game-Midas\\src\\BaseUrl.js":"33","D:\\Midas\\Game-Midas\\src\\components\\SnackBar\\index.jsx":"34","D:\\Midas\\Game-Midas\\src\\reducers\\index.js":"35","D:\\Midas\\Game-Midas\\src\\action\\index.js":"36","D:\\Midas\\Game-Midas\\src\\reducers\\signupReducer.js":"37"},{"size":854,"mtime":1610011668107,"results":"38","hashOfConfig":"39"},{"size":375,"mtime":1608712269019,"results":"40","hashOfConfig":"39"},{"size":805,"mtime":1609422588516,"results":"41","hashOfConfig":"39"},{"size":1150,"mtime":1610110311328,"results":"42","hashOfConfig":"39"},{"size":546,"mtime":1608898770000,"results":"43","hashOfConfig":"39"},{"size":361,"mtime":1610110123715,"results":"44","hashOfConfig":"39"},{"size":480,"mtime":1608693716000,"results":"45","hashOfConfig":"39"},{"size":469,"mtime":1609320940096,"results":"46","hashOfConfig":"39"},{"size":873,"mtime":1609419669652,"results":"47","hashOfConfig":"39"},{"size":1596,"mtime":1610446232536,"results":"48","hashOfConfig":"39"},{"size":2091,"mtime":1610182280774,"results":"49","hashOfConfig":"39"},{"size":4959,"mtime":1610375447494,"results":"50","hashOfConfig":"39"},{"size":9227,"mtime":1610374407911,"results":"51","hashOfConfig":"39"},{"size":278,"mtime":1608712269003,"results":"52","hashOfConfig":"39"},{"size":2002,"mtime":1608712269019,"results":"53","hashOfConfig":"39"},{"size":550,"mtime":1608712269003,"results":"54","hashOfConfig":"39"},{"size":4125,"mtime":1609768178803,"results":"55","hashOfConfig":"39"},{"size":1510,"mtime":1608712269003,"results":"56","hashOfConfig":"39"},{"size":885,"mtime":1608712269003,"results":"57","hashOfConfig":"39"},{"size":2688,"mtime":1610039319298,"results":"58","hashOfConfig":"39"},{"size":2927,"mtime":1608712269003,"results":"59","hashOfConfig":"39"},{"size":8747,"mtime":1610447760532,"results":"60","hashOfConfig":"39"},{"size":2496,"mtime":1610472267360,"results":"61","hashOfConfig":"39"},{"size":10678,"mtime":1610460452660,"results":"62","hashOfConfig":"39"},{"size":4018,"mtime":1609422725882,"results":"63","hashOfConfig":"39"},{"size":1451,"mtime":1609258489683,"results":"64","hashOfConfig":"39"},{"size":462,"mtime":1609422785400,"results":"65","hashOfConfig":"39"},{"size":472,"mtime":1609422800666,"results":"66","hashOfConfig":"39"},{"size":468,"mtime":1609422807115,"results":"67","hashOfConfig":"39"},{"size":459,"mtime":1609422813631,"results":"68","hashOfConfig":"39"},{"size":8766,"mtime":1610356429461,"results":"69","hashOfConfig":"39"},{"size":346,"mtime":1610367189624,"results":"70","hashOfConfig":"39"},{"size":96,"mtime":1609764148385,"results":"71","hashOfConfig":"39"},{"size":1846,"mtime":1609853048766,"results":"72","hashOfConfig":"39"},{"size":197,"mtime":1610025975511,"results":"73","hashOfConfig":"39"},{"size":125,"mtime":1610104105705,"results":"74","hashOfConfig":"39"},{"size":292,"mtime":1610104079278,"results":"75","hashOfConfig":"39"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"1v31ght",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"78"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"78"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"119"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"78"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"78"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"134"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"78"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},"D:\\Midas\\Game-Midas\\src\\index.jsx",[],["158","159"],"D:\\Midas\\Game-Midas\\src\\reportWebVitals.js",[],"D:\\Midas\\Game-Midas\\src\\App.jsx",[],"D:\\Midas\\Game-Midas\\src\\routes.js",[],"D:\\Midas\\Game-Midas\\src\\utils\\Router\\RouteMapper.jsx",[],"D:\\Midas\\Game-Midas\\src\\config\\routes.js",[],"D:\\Midas\\Game-Midas\\src\\utils\\Router\\RedirectRoute.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Home\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Account\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Home\\routes.js",[],"D:\\Midas\\Game-Midas\\src\\pages\\Home\\GameControl\\index.jsx",["160"],"import React, { useState } from 'react'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport { commonRoute } from '../../../config/routes'\r\nimport { useHistory } from 'react-router-dom'\r\nimport clsx from 'clsx'\r\nimport './style.scss'\r\n\r\nconst Options = ({ label, imgUrl, id, selected, setSelected }) => {\r\n  return (\r\n    <div\r\n      className={clsx('option-wrap', { 'selected': selected === id })}\r\n      onClick={setSelected.bind(this, id)}\r\n    >\r\n      <div className=\"option-label\">{label}</div>\r\n      <div className=\"option-image\">\r\n        <div className=\"selector-bg\">\r\n          <div className=\"image-warp\">\r\n            <img\r\n              src={require(`../../../assets/img/${imgUrl}.svg`).default}\r\n              alt={label}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nfunction GameControl() {\r\n\r\n  const [selected, setSelected] = useState('new')\r\n\r\n  const allyProps = { selected, setSelected }\r\n  const history = useHistory()\r\n\r\n  const clickHandler = () => {\r\n    if (selected === 'leaderboard') {\r\n      history.push(commonRoute.leaderboard);\r\n    }\r\n    else if (selected == 'resume') {\r\n      history.push(commonRoute.dashBoard);\r\n    }\r\n    else {\r\n      history.push(commonRoute.selectAvatar);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Grid item xs={12} md={10} className=\"game-option-card\">\r\n      <Grid\r\n        container\r\n        justify=\"space-around\"\r\n        alignContent=\"center\"\r\n        className=\"options-selector\"\r\n      >\r\n        <Options\r\n          label=\"Leader Board\"\r\n          imgUrl={`Leader-Board`}\r\n          id='leaderboard'\r\n          {...allyProps}\r\n        />\r\n        <Options\r\n          label=\"New\"\r\n          imgUrl={`New`}\r\n          id='new'\r\n          {...allyProps}\r\n        />\r\n        <Options\r\n          label=\"Resume\"\r\n          imgUrl={'Resume'}\r\n          id='resume'\r\n          {...allyProps}\r\n        />\r\n      </Grid>\r\n      <div className=\"btn-wrap\">\r\n        <Button className=\"nxt-btn\" onClick={clickHandler}>Next</Button>\r\n      </div>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default GameControl\r\n","D:\\Midas\\Game-Midas\\src\\pages\\Account\\Login\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Account\\Signup\\index.jsx",["161","162","163"],"import { Button } from '@material-ui/core'\r\nimport React, { useState, useEffect } from 'react'\r\nimport { useForm } from 'react-hook-form'\r\nimport { useHistory } from 'react-router-dom'\r\nimport {\r\n  FormCheckBox,\r\n  FormTextfield\r\n} from '../../../components/FormField'\r\nimport LinkButton from '../../../components/LinkButton'\r\nimport SnackBar from '../../../components/SnackBar'\r\nimport { commonRoute } from '../../../config/routes'\r\nimport { getOriginPath } from '../../../utils/commonFunctions'\r\nimport './style.scss'\r\nimport API, { URL } from '../../../Api'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { setResponseData } from '../../../action'\r\n\r\nfunction Signup() {\r\n\r\n  const ApiResponse = useSelector(state => state.signupData)\r\n  useEffect(() => {\r\n    console.log('from signup')\r\n    console.log(ApiResponse)\r\n  }, [ApiResponse])\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const defaultValues = {\r\n    username: '',\r\n    gmail: '',\r\n    password: '',\r\n    confirmPassword: '',\r\n    // isAgreed: false\r\n  }\r\n  const { register, watch, control, errors, handleSubmit } = useForm(defaultValues)\r\n  const history = useHistory()\r\n\r\n  const validationErr = {\r\n    name: 'Invalid name',\r\n    gmail: 'Invalid mail address',\r\n    passwordValidation: 'Password must contain alphaNumeric',\r\n    passwordLength: 'Required password length 8 to 20 letters',\r\n  }\r\n\r\n  const allyProps = { control, error: errors }\r\n\r\n  const [message, setMessage] = useState(null)\r\n  const [Error, setError] = useState(false)\r\n  const [detail, setDetail] = useState(null)\r\n  const [response, setResponse] = useState(null)\r\n  const [count, setCount] = useState(false)\r\n\r\n  const handleSignup = (data) => {\r\n    // console.log(data)\r\n    if (data.password !== data.confirmPassword) {\r\n      console.log('wrong password')\r\n      setMessage(\"Incorrect password, please enter valid password\")\r\n      setError(true)\r\n    }\r\n    else {\r\n      // console.log('correct password')\r\n      API.post(URL.signup, data)\r\n        .then((res) => {\r\n          console.log('response below')\r\n          console.log(res)\r\n          const { data } = res\r\n          dispatch(setResponseData(data)) // dispatching action to store a.k.a: Provider page\r\n          setResponse(data)\r\n          setCount(true)\r\n          \r\n          if (data.token) {\r\n            localStorage.setItem('midasToken', data.token)\r\n            localStorage.setItem('userId', data.id)\r\n            localStorage.setItem('userName', data.username)\r\n            setMessage('Thanks! Your account has been created successfully')\r\n            setDetail(data)\r\n            setError(true)\r\n          }\r\n          // else if (data?.user.update === 'updated password') {\r\n          //   setError(true)\r\n          //   setMessage('Created successfully...Please do signin')\r\n          // } \r\n          else if (data.status) {\r\n            setError(true)\r\n            setMessage(data.message)\r\n            // setMessage(\"Testing\")\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log('error section')\r\n          console.log(err)\r\n          setMessage(err.message)\r\n          setCount(true)\r\n        })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (count) {\r\n      if (response) {\r\n        setError(true)\r\n        setCount(false)\r\n      } else {\r\n        setError(true)\r\n        setMessage('Something went Wrong')\r\n        setCount(false)\r\n      }\r\n    }\r\n  }, [response, count])\r\n\r\n  function handleOnClose(reason) {\r\n    if (reason === 'clickaway') {\r\n      return\r\n    }\r\n    // if (message === 'Created successfully...Please do signin') {\r\n    //   history.push(`${getOriginPath(commonRoute.account)}/login`)\r\n    // }\r\n    if (detail?.token) {\r\n      history.push(`${getOriginPath(commonRoute.account)}/selectRole`)\r\n    }\r\n    setError(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"signup-box-sec\">\r\n      <h1 className=\"signup-title\">Sign-up</h1>\r\n      <form className=\"field-wrap\" onSubmit={handleSubmit(handleSignup)}>\r\n        <div className=\"form-field\">\r\n          <FormTextfield\r\n            className=\"user-name\"\r\n            label=\"Username\"\r\n            name=\"username\"\r\n            placeholder=\"Midas\"\r\n            onChange={(e) => e.target.value}\r\n            rules={{\r\n              required: 'Please enter username',\r\n              minLength: {\r\n                value: 3,\r\n                message: validationErr.name\r\n              },\r\n              pattern: {\r\n                value: /^[A-Za-z]*$/,\r\n                message: validationErr.name\r\n              }\r\n            }}\r\n            error={errors.username && errors.username.message}\r\n            hasValidation\r\n            {...allyProps}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-field\">\r\n          <FormTextfield\r\n            className=\"gmail-field\"\r\n            name=\"gmail\"\r\n            label=\"E-Mail\"\r\n            placeholder=\"midas123@gmail.com\"\r\n            onChange={(e) => e.target.value}\r\n            rules={{\r\n              required: 'Please enter your gmail',\r\n              pattern: {\r\n                value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                message: validationErr.gmail\r\n              }\r\n            }}\r\n            error={errors.gmail && errors.gmail.message}\r\n            hasValidation\r\n            {...allyProps}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-field\">\r\n          <FormTextfield\r\n            className=\"pswd-field\"\r\n            label=\"Password\"\r\n            name=\"password\"\r\n            type=\"password\"\r\n            placeholder=\"********\"\r\n            onChange={(e) => e.target.value}\r\n            rules={{\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 8,\r\n                message: validationErr.passwordLength\r\n              },\r\n              maxLength: {\r\n                value: 20,\r\n                message: validationErr.passwordLength\r\n              },\r\n              pattern: {\r\n                value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,12}$/,\r\n                message: validationErr.passwordValidation\r\n              }\r\n            }}\r\n            error={errors.password && errors.password.message}\r\n            hasValidation\r\n            {...allyProps}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"form-field\">\r\n          <FormTextfield\r\n            className=\"pswd-field\"\r\n            label=\"Repeat Password\"\r\n            name=\"confirmPassword\"\r\n            type=\"password\"\r\n            placeholder=\"********\"\r\n            onChange={(e) => e.target.value}\r\n            rules={{\r\n              required: 'Please enter your password',\r\n              minLength: {\r\n                value: 6,\r\n                message: validationErr.passwordLength\r\n              },\r\n              maxLength: {\r\n                value: 12,\r\n                message: validationErr.passwordLength\r\n              },\r\n              pattern: {\r\n                value: /^(?=.*[A-Za-z])(?=.*\\d)[A-Za-z\\d]{6,12}$/,\r\n                message: validationErr.passwordValidation\r\n              }\r\n            }}\r\n            error={errors.confirmPassword && errors.confirmPassword.message}\r\n            {...allyProps}\r\n          />\r\n        </div>\r\n\r\n        {/* <div className=\"form-field\">\r\n          <div className=\"signup-terms\">\r\n            <FormCheckBox\r\n              name=\"isAgreed\"\r\n              className=\"terms-checkbox\"\r\n              rules={{ required: 'Need to agree to the terms to continue' }}\r\n              error={!!errors.isAgreed && errors.isAgreed.message}\r\n              control={control}\r\n            />\r\n            <span className=\"term-cont\">By Signing up I Agree with</span>\r\n            <LinkButton className=\"terms-link\">Terms and Conditions</LinkButton>\r\n          </div>\r\n          {errors?.isAgreed?.message && (\r\n            <div className=\"err-msg\">{errors?.isAgreed?.message}</div>\r\n          )}\r\n        </div> */}\r\n\r\n        <div className=\"form-btns\">\r\n          <Button type=\"submit\" className=\"signin-btn\">\r\n            Signup\r\n          </Button>\r\n          <span className=\"cont\">or</span>\r\n          <LinkButton\r\n            className=\"signup-btn\"\r\n            onClick={() =>\r\n              history.push(`${getOriginPath(commonRoute.account)}/login`)\r\n            }\r\n          >\r\n            Login\r\n          </LinkButton>\r\n        </div>\r\n      </form>\r\n      {response && response.token && (\r\n        <SnackBar\r\n          openDialog={Error}\r\n          message={message}\r\n          onclose={handleOnClose}\r\n          severity={'success'}\r\n        />\r\n      )}\r\n      {response && response.update && (\r\n        <SnackBar\r\n          openDialog={Error}\r\n          message={message}\r\n          onclose={handleOnClose}\r\n          severity={'success'}\r\n        />\r\n      )}\r\n      {response && response.status && (\r\n        <SnackBar\r\n          openDialog={Error}\r\n          message={message}\r\n          onclose={handleOnClose}\r\n          severity={'info'}\r\n        />\r\n      )}\r\n      {!response && (\r\n        <SnackBar\r\n          openDialog={Error}\r\n          message={message}\r\n          onclose={handleOnClose}\r\n          severity={'error'}\r\n        />\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Signup\r\n","D:\\Midas\\Game-Midas\\src\\components\\Footer\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\utils\\commonFunctions.js",[],"D:\\Midas\\Game-Midas\\src\\components\\LinkButton\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\components\\FormField\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\components\\DatePicker\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\components\\TextArea\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\components\\Select\\index.jsx",[],["164","165"],"D:\\Midas\\Game-Midas\\src\\components\\Textfield\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Home\\SelectAvatar\\index.jsx",["166"],"import React, { useState } from 'react'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\nimport './useStyle.scss'\r\nimport doller from '../../../assets/img/doller 2.svg'\r\nimport unlock from '../../../assets/img/lock.svg'\r\nimport lock from '../../../assets/img/lock1.svg'\r\nimport { commonRoute } from '../../../config/routes'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Textfield from '../../../components/Textfield'\r\nimport SnackBar from '../../../components/SnackBar'\r\nimport API, { URL } from '../../../Api'\r\n\r\nconst AvatarOptions = ({ label, imgUrl, id, avatar, setAvatar }) => {\r\n    return (\r\n        <div\r\n            className={clsx('option-wrap', avatar === id && 'selected')}\r\n            onClick={setAvatar.bind(this, id)}\r\n        >\r\n            <div className=\"option-image\">\r\n                <div className=\"selector-bg\">\r\n                    <div className=\"image-warp\">\r\n                        <img\r\n                            src={require(`../../../assets/img/${imgUrl}.svg`).default}\r\n                            alt={label}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {/* <div className=\"option-label\">{label}</div> */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst LengthOptions = ({ id, dollerImg, text1, text2, gameLength, setGameLength }) => {\r\n    return (\r\n        <Grid item md={3} sm={12} xs={12}\r\n            className={clsx('lenrole-button', { \"selected-lenrole\": gameLength === id })}\r\n            onClick={setGameLength.bind(this, id)}\r\n        >\r\n            <div className=\"selected-lenrole\">\r\n                <div className=\"button-text-wrap\">\r\n                    <span className=\"button-text1\">{text1}</span><br />\r\n                    <span className=\"button-text2\">{text2}</span>\r\n                </div>\r\n                <img src={dollerImg} alt={id} className=\"doller-icon\" />\r\n            </div >\r\n        </Grid >\r\n    )\r\n}\r\n\r\nconst RoleOptions = ({ id, title, role, setRole }) => {\r\n    return (\r\n        <Grid item md={3} sm={12} xs={12}\r\n            className={clsx('lenrole-button', { \"selected-lenrole\": role === id })}\r\n            onClick={setRole.bind(this, id)}\r\n        >\r\n            <div className=\"button-text-wrap\" style={{ marginTop: '20px' }}>\r\n                <span className=\"button-text1\">{title}</span>\r\n            </div>\r\n            <img src={(role === id) ? unlock : lock} alt={id} className=\"doller-icon\" style={{ bottom: '20px' }} />\r\n        </Grid>\r\n    )\r\n}\r\n\r\nfunction SelectAvatar() {\r\n    const [avatar, setAvatar] = useState(1)\r\n    const [income, setIncome] = useState(null)\r\n    const [gameLength, setGameLength] = useState(10)\r\n    const [role, setRole] = useState('easy')\r\n\r\n    const [error, setError] = useState(false)\r\n    const [errMsg, setErrMsg] = useState('')\r\n\r\n    const [response, setResponse] = useState(null)\r\n\r\n    const allyProps = { avatar, setAvatar }\r\n    const otherLen = { gameLength, setGameLength }\r\n    const otherRol = { role, setRole }\r\n\r\n    const history = useHistory()\r\n\r\n    const initialValues = {\r\n        avatarIcon: avatar,\r\n        income: income,\r\n        gameLength: gameLength,\r\n        role: role,\r\n    }\r\n\r\n    const token = localStorage.getItem('midasToken')\r\n    const auth = 'Bearer '.concat(token)\r\n\r\n    const goToSelectDream = (initialValues) => {\r\n        console.log(initialValues)\r\n        if (income) {\r\n            // console.log(income);\r\n            API.post(URL.gameDetails, initialValues, {\r\n                headers: {\r\n                    Authorization: auth\r\n                }\r\n            })\r\n                .then((res) => {\r\n                    console.log('avatar response')\r\n                    console.log(res)\r\n                    setResponse(res)\r\n                    history.push(commonRoute.selectDreams)\r\n                    // if (response?.status) {\r\n                    //     history.push(commonRoute.selectDreams)\r\n                    // }\r\n                })\r\n                .catch((err) => {\r\n                    console.log('avatar error section')\r\n                    console.log(err)\r\n                    console.log(err.message)\r\n                })\r\n            // history.push(commonRoute.selectDreams);\r\n        }\r\n        else {\r\n            setError(true)\r\n            setErrMsg('Please enter your Income...')\r\n        }\r\n    }\r\n\r\n    const handleIncomeValueChanges = (e) => {\r\n        setIncome(+e.target.value)\r\n    }\r\n\r\n    function handleOnClose(reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setError(false)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={11} md={10} className=\"select-avatar-card\">\r\n            <div className=\"header-sec\">\r\n                <h3 className=\"main-head\">Select Your Avatar</h3>\r\n            </div>\r\n            <Grid\r\n                container\r\n                justify=\"space-around\"\r\n                alignContent=\"center\"\r\n                className=\"options-selector\"\r\n            >\r\n                <AvatarOptions\r\n                    label=\"Admin\"\r\n                    imgUrl={`Avatar1`}\r\n                    id={1}\r\n                    {...allyProps}\r\n                />\r\n                <AvatarOptions\r\n                    label=\"Admin\"\r\n                    imgUrl={`Avatar2`}\r\n                    id={2}\r\n                    {...allyProps}\r\n                />\r\n                <AvatarOptions\r\n                    label=\"Admin\"\r\n                    imgUrl={'Avatar3'}\r\n                    id={3}\r\n                    {...allyProps}\r\n                />\r\n                <AvatarOptions\r\n                    label=\"Admin\"\r\n                    imgUrl={`Avatar4`}\r\n                    id={4}\r\n                    {...allyProps}\r\n                />\r\n                <AvatarOptions\r\n                    label=\"Admin\"\r\n                    imgUrl={'Avatar5'}\r\n                    id={5}\r\n                    {...allyProps}\r\n                />\r\n            </Grid>\r\n\r\n            <div className=\"income-wrap\">\r\n                <div className=\"header-sec\">\r\n                    <h3 className=\"main-head\">Income</h3>\r\n                </div>\r\n                <Textfield\r\n                    name=\"income\"\r\n                    placeholder=\"$120000\"\r\n                    className=\"income-field\"\r\n                    required\r\n                    onChange={(e) => handleIncomeValueChanges(e)}\r\n                />\r\n            </div>\r\n\r\n            <div className=\"gameLength-wrap\">\r\n                <div className=\"header-sec\">\r\n                    <h3 className=\"main-head\">Game Length</h3>\r\n                </div>\r\n                <Grid container className=\"lenrole-button-wrap\">\r\n                    <LengthOptions\r\n                        id={10}\r\n                        dollerImg={doller}\r\n                        text1=\"Short\"\r\n                        text2=\"10 Turns\"\r\n                        {...otherLen} />\r\n                    <LengthOptions\r\n                        id={20}\r\n                        dollerImg={doller}\r\n                        text1=\"Medium\"\r\n                        text2=\"20 Turns\"\r\n                        {...otherLen} />\r\n                    <LengthOptions\r\n                        id={40}\r\n                        dollerImg={doller}\r\n                        text1=\"Long\"\r\n                        text2=\"40 Turns\"\r\n                        {...otherLen} />\r\n                </Grid>\r\n            </div>\r\n\r\n            <div className=\"gameLength-wrap\">\r\n                <div className=\"header-sec\">\r\n                    <h3 className=\"main-head\">Role</h3>\r\n                </div>\r\n                <Grid container className=\"lenrole-button-wrap\">\r\n                    <RoleOptions\r\n                        id=\"easy\"\r\n                        title=\"Easy\"\r\n                        {...otherRol}\r\n                    />\r\n                    <RoleOptions\r\n                        id=\"standard\"\r\n                        title=\"Standard\"\r\n                        {...otherRol}\r\n                    />\r\n                    <RoleOptions\r\n                        id=\"advance\"\r\n                        title=\"Advance\"\r\n                        {...otherRol}\r\n                    />\r\n                </Grid>\r\n            </div>\r\n\r\n            <div className=\"btn-wrap\">\r\n                <Button className=\"nxt-btn\" onClick={() => goToSelectDream(initialValues)}>Next</Button>\r\n            </div>\r\n\r\n            {error &&\r\n                (<SnackBar\r\n                    openDialog={error}\r\n                    message={errMsg}\r\n                    onclose={handleOnClose}\r\n                    severity={'info'}\r\n                />)\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SelectAvatar\r\n","D:\\Midas\\Game-Midas\\src\\pages\\Home\\LeaderBoard\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Home\\SelectDream\\index.jsx",["167","168","169"],"import React, { useState } from 'react'\r\nimport { Button, Grid } from '@material-ui/core'\r\nimport clsx from 'clsx'\r\nimport './style.scss'\r\nimport doller from '../../../assets/img/doller 2.svg'\r\nimport pointIcon from '../../../assets/img/pointsIcon.svg'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { commonRoute } from '../../../config/routes'\r\n\r\nconst SelectDream = ({ label, imgUrl, cost, points, id, dream, setDream}) => {\r\n    const selected = dream === id ? 'selected' : '';\r\n    // if (dreams === id) {\r\n    //     setDreams({ dream: id, cost: cost })\r\n    // }\r\n\r\n    return (\r\n        <div className=\"option-wrap\" onClick={setDream.bind(this, id)}>\r\n            <div className=\"option-image\" >\r\n                <div className={`image-warp ${selected}`}>\r\n                    <img style={{ height: '100px' }}\r\n                        src={require(`../../../assets/img/${imgUrl}.svg`).default}\r\n                        alt={label}\r\n                    />\r\n                    <div>\r\n                        <img src={doller} alt={label} style={{ width: 20, height: 21, position: 'absolute' }} />\r\n                        <span style={{\r\n                            position: 'relative', fontSize: 18,\r\n                            fontWeight: 'bold', color: ' #747d8c', marginLeft: 30\r\n                        }}>{cost}</span>\r\n                    </div>\r\n                    {/* <div>\r\n                        <img src={pointIcon} alt={label} style={{ width: 20, height: 21, position: 'absolute' }} />\r\n                        <span style={{\r\n                            position: 'relative', fontSize: 18,\r\n                            fontWeight: 'bold', color: ' #747d8c', marginLeft: 30\r\n                        }}>{points}</span>\r\n                    </div> */}\r\n                </div>\r\n            </div>\r\n            <div className=\"option-label\">{label}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SelectCar = ({ label, imgUrl, cost, points, id, car, setCar }) => {\r\n    const selected = car === id ? 'selected' : ''\r\n    return (\r\n        <div className='option-wrap' onClick={setCar.bind(this, id)}>\r\n            <div className=\"option-image\">\r\n                <div className={`image-warp ${selected}`}>\r\n                    <img\r\n                        src={require(`../../../assets/img/${imgUrl}.svg`).default}\r\n                        alt={label}\r\n                    />\r\n                    <div style={{ marginTop: '10px', bottom: '5px' }}>\r\n                        <img src={doller} alt={label} style={{ width: 20, height: 21, position: 'absolute', }} />\r\n                        <span style={{\r\n                            position: 'relative', fontSize: 18,\r\n                            fontWeight: 'bold', color: ' #747d8c', marginLeft: 30\r\n                        }}>{cost}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"option-label\">{label}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst SelectHouse = ({ label, imgUrl, cost, points, id, house, setHouse }) => {\r\n    const selected = house === id ? 'selected' : ''\r\n    return (\r\n        <div className='option-wrap' onClick={setHouse.bind(this, id)} >\r\n            <div className=\"option-image\">\r\n                <div className={`image-warp ${selected}`}>\r\n                    <img\r\n                        src={require(`../../../assets/img/${imgUrl}.svg`).default}\r\n                        alt={label}\r\n                        style={{ width: 150, height: 100 }}\r\n                    />\r\n                    <div>\r\n                        <img src={doller} style={{ width: 20, height: 21, position: 'absolute', }} />\r\n                        <span style={{\r\n                            position: 'relative', fontSize: 18,\r\n                            fontWeight: 'bold', color: ' #747d8c', marginLeft: 30\r\n                        }}>{cost}</span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"option-label\">{label}</div>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction SelectDreams() {\r\n\r\n    // const [dreams, setDreams] = useState({\r\n    //     dream: 'visiting',\r\n    //     cost: 3000,\r\n    //     points: 0,\r\n    // });\r\n    // const [cars, setCars] = useState({\r\n    //     car: 'relisibleCar',\r\n    //     cost: 60000,\r\n    //     points: 0,\r\n    // });\r\n    // const [houses, setHouses] = useState({\r\n    //     house: 'studioApt',\r\n    //     cost: 1200000,\r\n    //     points: 0,\r\n    // });\r\n\r\n    const [dream, setDream] = useState('visiting')\r\n    // const [dreamCost, setDreamCost] = useState(3000)\r\n    const [car, setCar] = useState('relisibleCar')\r\n    // const [carCost, setCarCost] = useState(60000)\r\n    const [house, setHouse] = useState('studioApt')\r\n    // const [houseCost, setHouseCost] = useState(1200000)\r\n\r\n    const allyProps = { dream, setDream }\r\n    const restCar = { car, setCar }\r\n    const restHouse = { house, setHouse }\r\n\r\n    const history = useHistory();\r\n\r\n    const initialValues = {\r\n        dream: dream,\r\n        car: car,\r\n        house: house,\r\n    }\r\n\r\n    const goToDashboard = (initialValues) => {\r\n        console.log(initialValues)\r\n        history.push(commonRoute.dashBoard)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs={12} md={10} className=\"select-dreams-card\">\r\n            <div className=\"header-sec\">\r\n                <h3 className=\"main-head\">Select Dreams</h3>\r\n            </div>\r\n            <Grid\r\n                container\r\n                justify=\"space-around\"\r\n                alignContent=\"center\"\r\n                className=\"options-selector\"\r\n            >\r\n                <SelectDream\r\n                    label=\"Visit Taj Mahal\"\r\n                    imgUrl={`Traveller`}\r\n                    id={'visiting'}\r\n                    cost={3000}\r\n                    // points={2000}\r\n                    {...allyProps}\r\n                />\r\n                <SelectDream\r\n                    label=\"Travel To Abroad\"\r\n                    imgUrl={`Flight`}\r\n                    id={'flight'}\r\n                    cost={5000}\r\n                    // points={2000}\r\n                    {...allyProps}\r\n                />\r\n                <SelectDream\r\n                    label=\"Hill Station\"\r\n                    imgUrl={'HillStation'}\r\n                    id={'hillStation'}\r\n                    cost={6000}\r\n                    // points={2000}\r\n                    {...allyProps}\r\n                />\r\n                <SelectDream\r\n                    label=\"Visit Beach\"\r\n                    imgUrl={`Beach`}\r\n                    id={'beach'}\r\n                    cost={1000}\r\n                    // points={2000}\r\n                    {...allyProps}\r\n                />\r\n                <SelectDream\r\n                    label=\"Long Ride\"\r\n                    imgUrl={'BikeRide'}\r\n                    id={'bikeRide'}\r\n                    cost={1000}\r\n                    // points={2000}\r\n                    {...allyProps}\r\n                />\r\n            </Grid>\r\n\r\n            <div className=\"header-sec\">\r\n                <h3 className=\"main-head\">Cars</h3>\r\n            </div>\r\n            <Grid\r\n                container\r\n                justify=\"space-around\"\r\n                alignContent=\"center\"\r\n                className=\"options-selector\"\r\n            >\r\n                <SelectCar\r\n                    label=\"Relisible Car\"\r\n                    imgUrl={`RelisibleCar`}\r\n                    id={'relisibleCar'}\r\n                    cost={60000}\r\n                    // points={2000}\r\n                    {...restCar}\r\n                />\r\n                <SelectCar\r\n                    label=\"Economy Car\"\r\n                    imgUrl={`EconomyCar`}\r\n                    id={'economyCar'}\r\n                    cost={70000}\r\n                    // points={2000}\r\n                    {...restCar}\r\n                />\r\n                <SelectCar\r\n                    label=\"Fully Loaded Car\"\r\n                    imgUrl={'FullLoadCar'}\r\n                    id={'fullLoadCar'}\r\n                    cost={80000}\r\n                    // points={2000}\r\n                    {...restCar}\r\n                />\r\n                <SelectCar\r\n                    label=\"Luxury Car\"\r\n                    imgUrl={'LuxuryCar'}\r\n                    id={'luxuryCar'}\r\n                    cost={90000}\r\n                    // points={2000}\r\n                    {...restCar}\r\n                />\r\n                <SelectCar\r\n                    label=\"Speedster Car\"\r\n                    imgUrl={`SpeedsterCar`}\r\n                    id={'speedsterCar'}\r\n                    cost={100000}\r\n                    // points={2000}\r\n                    {...restCar}\r\n                />\r\n            </Grid>\r\n\r\n            <div className=\"header-sec\">\r\n                <h3 className=\"main-head\">House</h3>\r\n            </div>\r\n            <Grid\r\n                container\r\n                justify=\"space-around\"\r\n                alignContent=\"center\"\r\n                className=\"options-selector\"\r\n            >\r\n                <SelectHouse\r\n                    label=\"Studio Apartment\"\r\n                    imgUrl={`StudioApt`}\r\n                    id={'studioApt'}\r\n                    cost={1200000}\r\n                    // points={2000}\r\n                    {...restHouse}\r\n                />\r\n                <SelectHouse\r\n                    label=\"Fixer Upper\"\r\n                    imgUrl={`FixerUp`}\r\n                    id={'fixerUp'}\r\n                    cost={1300000}\r\n                    // points={2000}\r\n                    {...restHouse}\r\n                />\r\n                <SelectHouse\r\n                    label=\"Rambler\"\r\n                    imgUrl={'Rambler'}\r\n                    id={'rambler'}\r\n                    cost={1400000}\r\n                    // points={2000}\r\n                    {...restHouse}\r\n                />\r\n                <SelectHouse\r\n                    label=\"Mansion\"\r\n                    imgUrl={`Mansion`}\r\n                    id={'mansion'}\r\n                    cost={1500000}\r\n                    // points={2000}\r\n                    {...restHouse}\r\n                />\r\n                <SelectHouse\r\n                    label=\"Chateau\"\r\n                    imgUrl={'Chateau'}\r\n                    id={'chateau'}\r\n                    cost={1600000}\r\n                    // points={2000}\r\n                    {...restHouse}\r\n                />\r\n            </Grid>\r\n\r\n            <div className=\"btn-wrap\">\r\n                <Button className=\"nxt-btn\" onClick={() => goToDashboard(initialValues)}>Next</Button>\r\n            </div>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default SelectDreams","D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\routes.js",[],["170","171"],"D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Advisor\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Balance\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\CashFlow\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\DashBoard\\Stats\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\pages\\Account\\SelectRole\\index.jsx",["172","173","174","175","176"],"import React, { useEffect, useState } from 'react'\r\nimport { FormDropdown, FormTextfield } from '../../../components/FormField'\r\nimport { Button } from '@material-ui/core'\r\nimport { useHistory, useLocation } from 'react-router-dom'\r\nimport { useForm } from 'react-hook-form'\r\nimport { commonRoute } from '../../../config/routes'\r\nimport './styles.scss'\r\nimport API, { URL } from '../../../Api'\r\nimport { useSelector, connect } from 'react-redux'\r\nimport SnackBar from '../../../components/SnackBar'\r\n\r\nfunction SelectRole() {\r\n    // useSelector hook is used for get state from reducers. a.k.a: Receiver page\r\n    const getApiData = useSelector(state => state.signupData)\r\n\r\n    const [tempInstructors, setTempInstructors] = useState(null)\r\n    const [tempOrganizations, setTempOrganizations] = useState(null)\r\n    const [instructor, setInstructor] = useState(null)\r\n    const [organization, setOrganization] = useState(null)\r\n\r\n    useEffect(() => {\r\n        // console.log('from 2nd page')\r\n        // console.log(getApiData)\r\n        if (getApiData) {\r\n            setTempInstructors(getApiData.instructors);\r\n            setTempOrganizations(getApiData.organizations);\r\n        }\r\n        if (tempInstructors) {\r\n            setInstructor(tempInstructors.map((item, index) => ({ id: item.id, value: item.username, tenant_key: item.tenant_key })));\r\n        }\r\n        if (tempOrganizations) {\r\n            setOrganization(tempOrganizations.map((item, index) => ({ id: item.id, value: item.organizationName, tenant_key: item.tenant_key })));\r\n        }\r\n\r\n    }, [getApiData, tempInstructors, tempOrganizations])\r\n\r\n    // console.log('instructor')\r\n    // console.log(instructors)\r\n    // console.log('organization')\r\n    // console.log(organizations)\r\n\r\n    const defaultValues = {\r\n        role: null,\r\n        organizationId: null,\r\n        instructorId: null,\r\n        newOrganization: null,\r\n        subscription: null,\r\n    }\r\n\r\n    const roleOptions = [\r\n        { id: 'Individual', value: 'Individual' },\r\n        { id: 'Student', value: 'Student' },\r\n        { id: 'Instructor', value: 'Instructor' },\r\n        { id: 'School_Admin', value: 'School Admin' }\r\n    ]\r\n\r\n    const subscriptionPeriod = [\r\n        { id: 1, value: '1 Year' },\r\n        { id: 2, value: '2 Year' },\r\n        { id: 3, value: '3 Year' },\r\n    ]\r\n\r\n    const [message, setMessage] = useState(null)\r\n    const [Error, setError] = useState(false)\r\n    const [detail, setDetail] = useState(null)\r\n    const [response, setResponse] = useState(null)\r\n    const [count, setCount] = useState(false)\r\n\r\n    const [role, setRole] = useState(defaultValues.role)\r\n\r\n    const { control, errors, handleSubmit } = useForm(defaultValues)\r\n    const history = useHistory()\r\n\r\n    const otherProps = { control, error: errors }\r\n\r\n    const token = localStorage.getItem('midasToken')\r\n    const auth = 'Bearer '.concat(token)\r\n\r\n    const onSubmitHandler = (values) => {\r\n        console.log('entry')\r\n        console.log(values)\r\n\r\n        API.post(URL.userprofile, values, {\r\n            headers: {\r\n                Authorization: auth\r\n            }\r\n        })\r\n            .then((res) => {\r\n                console.log('res entry')\r\n                console.log(res)\r\n                const { data } = res;\r\n                setResponse(res)\r\n                setCount(true)\r\n\r\n                if (res?.status === 200) {\r\n                    setMessage('Submitted Successfully...')\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                // console.log('error section')\r\n                // console.log(err)\r\n                setMessage(err.message)\r\n                setCount(true)\r\n            })\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (count) {\r\n            if (response) {\r\n                setError(true)\r\n                setCount(false)\r\n            } else {\r\n                setError(true)\r\n                setCount(false)\r\n                setMessage('Something went wrong')\r\n            }\r\n        }\r\n    }, [response, count])\r\n\r\n    function handleOnClose(reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        if (response?.status === 200) {\r\n            history.push(commonRoute.gameOptions)\r\n        }\r\n        setError(false)\r\n    }\r\n\r\n    // console.log('default')\r\n    // console.log(defaultValues)\r\n\r\n    return (\r\n        <div className=\"role-box-sec\">\r\n            <h1 className=\"title\">Select Your Role</h1>\r\n\r\n            <form className=\"field-wrap\" onSubmit={handleSubmit(onSubmitHandler)}>\r\n                <div className=\"form-field\">\r\n                    <FormDropdown\r\n                        id=\"role\"\r\n                        name=\"role\"\r\n                        className=\"role-field\"\r\n                        label=\"Choose the Role\"\r\n                        list={roleOptions}\r\n                        placeholder=\"Select\"\r\n                        autoFocus\r\n                        onChange={(e) => setRole(e.target.value)}\r\n                        rules={{ required: 'Please select your role' }}\r\n                        {...otherProps}\r\n                    />\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <FormDropdown\r\n                        id=\"organizationId\"\r\n                        name=\"organizationId\"\r\n                        className=\"organizations-field\"\r\n                        label=\"Choose the organization\"\r\n                        list={organization ? organization : []}\r\n                        placeholder=\"Select\"\r\n                        rules={(role === 'Student' || role === 'Instructor') && { required: 'Please select your school' }}\r\n                        disabled={!(role === 'Student' || role === 'Instructor') ? true : false}\r\n                        {...otherProps}\r\n                    />\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <FormDropdown\r\n                        id=\"instructorId\"\r\n                        name=\"instructorId\"\r\n                        className=\"instructor-field\"\r\n                        label=\"Choose Your Instructor (Optional)\"\r\n                        list={instructor ? instructor : []}\r\n                        placeholder=\"Select\"\r\n                        // rules={(role === 'Student') && { required: 'Please select your instructor' }}\r\n                        disabled={!(role === 'Student') ? true : false}\r\n                        {...otherProps}\r\n                    />\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <FormTextfield\r\n                        id=\"newOrganization\"\r\n                        name=\"newOrganization\"\r\n                        label=\"Create Organization\"\r\n                        placeholder=\"enter organization name\"\r\n                        required\r\n                        rules={(role === 'School_Admin') && { required: 'Please enter organization name' }}\r\n                        disabled={!(role === 'School_Admin') ? true : false}\r\n                        {...otherProps}\r\n                    />\r\n                </div>\r\n                <div className=\"form-field\">\r\n                    <FormDropdown\r\n                        id=\"subscription\"\r\n                        name=\"subscription\"\r\n                        className=\"subscription-field\"\r\n                        label=\"Choose subscription period\"\r\n                        list={subscriptionPeriod}\r\n                        placeholder=\"Select\"\r\n                        onChange={(e) => e.target.value}\r\n                        rules={(role === 'School_Admin') && { required: 'Please select subscription period' }}\r\n                        disabled={!(role === 'School_Admin') ? true : false}\r\n                        {...otherProps}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-btns\">\r\n                    <Button type=\"submit\" className=\"signin-btn\">\r\n                        Submit\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n            {response && response.status && (\r\n                <SnackBar\r\n                    openDialog={Error}\r\n                    message={message}\r\n                    onclose={handleOnClose}\r\n                    severity={'success'}\r\n                />\r\n            )}\r\n            {!response && (\r\n                <SnackBar\r\n                    openDialog={Error}\r\n                    message={message}\r\n                    onclose={handleOnClose}\r\n                    severity={'error'}\r\n                />\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\n// const mapStateToProps = (state) => {\r\n//     return {\r\n//         response: state.response\r\n//     }\r\n// }\r\n\r\nexport default SelectRole\r\n","D:\\Midas\\Game-Midas\\src\\Api.js",[],"D:\\Midas\\Game-Midas\\src\\BaseUrl.js",[],"D:\\Midas\\Game-Midas\\src\\components\\SnackBar\\index.jsx",[],"D:\\Midas\\Game-Midas\\src\\reducers\\index.js",[],"D:\\Midas\\Game-Midas\\src\\action\\index.js",[],"D:\\Midas\\Game-Midas\\src\\reducers\\signupReducer.js",[],{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"181","severity":1,"message":"182","line":40,"column":23,"nodeType":"183","messageId":"184","endLine":40,"endColumn":25},{"ruleId":"185","severity":1,"message":"186","line":6,"column":3,"nodeType":"187","messageId":"188","endLine":6,"endColumn":15},{"ruleId":"185","severity":1,"message":"189","line":35,"column":11,"nodeType":"187","messageId":"188","endLine":35,"endColumn":19},{"ruleId":"185","severity":1,"message":"190","line":35,"column":21,"nodeType":"187","messageId":"188","endLine":35,"endColumn":26},{"ruleId":"177","replacedBy":"191"},{"ruleId":"179","replacedBy":"192"},{"ruleId":"185","severity":1,"message":"193","line":75,"column":12,"nodeType":"187","messageId":"188","endLine":75,"endColumn":20},{"ruleId":"185","severity":1,"message":"194","line":3,"column":8,"nodeType":"187","messageId":"188","endLine":3,"endColumn":12},{"ruleId":"185","severity":1,"message":"195","line":6,"column":8,"nodeType":"187","messageId":"188","endLine":6,"endColumn":17},{"ruleId":"196","severity":1,"message":"197","line":81,"column":25,"nodeType":"198","endLine":81,"endColumn":102},{"ruleId":"177","replacedBy":"199"},{"ruleId":"179","replacedBy":"200"},{"ruleId":"185","severity":1,"message":"201","line":4,"column":22,"nodeType":"187","messageId":"188","endLine":4,"endColumn":33},{"ruleId":"185","severity":1,"message":"202","line":9,"column":23,"nodeType":"187","messageId":"188","endLine":9,"endColumn":30},{"ruleId":"185","severity":1,"message":"203","line":65,"column":12,"nodeType":"187","messageId":"188","endLine":65,"endColumn":18},{"ruleId":"185","severity":1,"message":"204","line":65,"column":20,"nodeType":"187","messageId":"188","endLine":65,"endColumn":29},{"ruleId":"185","severity":1,"message":"205","line":91,"column":25,"nodeType":"187","messageId":"188","endLine":91,"endColumn":29},"no-native-reassign",["206"],"no-negated-in-lhs",["207"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'FormCheckBox' is defined but never used.","Identifier","unusedVar","'register' is assigned a value but never used.","'watch' is assigned a value but never used.",["206"],["207"],"'response' is assigned a value but never used.","'clsx' is defined but never used.","'pointIcon' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement",["206"],["207"],"'useLocation' is defined but never used.","'connect' is defined but never used.","'detail' is assigned a value but never used.","'setDetail' is assigned a value but never used.","'data' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]